# -*- coding: utf-8 -*-################################################################################    OpenERP, Open Source Management Solution#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).##    This program is free software: you can redistribute it and/or modify#    it under the terms of the GNU Affero General Public License as#    published by the Free Software Foundation, either version 3 of the#    License, or (at your option) any later version.##    This program is distributed in the hope that it will be useful,#    but WITHOUT ANY WARRANTY; without even the implied warranty of#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#    GNU Affero General Public License for more details.##    You should have received a copy of the GNU Affero General Public License#    along with this program.  If not, see <http://www.gnu.org/licenses/>.###############################################################################import timefrom openerp.osv import fields, osvfrom openerp.tools.translate import _from datetime import datetimeimport openerp.addons.decimal_precision as dpclass account_move(osv.osv):    _inherit = "account.move"    _columns = {        'period_id': fields.many2one('account.period', 'Period', required=True, states={'posted': [('readonly', True)]}),                                     # domain="['|',('company_id', '=', company_id), ('company_id', '=', False)]"),        'journal_id': fields.many2one('account.journal', 'Journal', required=True,                                      states={'posted': [('readonly', True)]}),                                      # domain="['|',('company_id', '=', company_id), ('company_id', '=', False)]"),    }account_move()class account_move_line(osv.osv):    _inherit = "account.move.line"    _columns = {    }    def _query_get(self, cr, uid, obj='l', context=None):        clause = super(account_move_line, self)._query_get(cr, uid, obj, context)        if context.get('partner_id'):            clause += " AND " + obj + ".partner_id = %s" % context['partner_id']        if context.get('currency_id'):            company_currency_id = self.pool.get('res.users').browse(cr, uid, uid).company_id.currency_id.id            if context['currency_id'] != company_currency_id:                clause += " AND " + obj + ".currency_id = %s" % context['currency_id']            else:                clause += " AND (" + obj + ".currency_id is null OR " + obj + ".currency_id = %s )" % context[                    'currency_id']        return clauseaccount_move_line()