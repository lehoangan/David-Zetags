# -*- coding: utf-8 -*-################################################################################    OpenERP, Open Source Management Solution#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).##    This program is free software: you can redistribute it and/or modify#    it under the terms of the GNU Affero General Public License as#    published by the Free Software Foundation, either version 3 of the#    License, or (at your option) any later version.##    This program is distributed in the hope that it will be useful,#    but WITHOUT ANY WARRANTY; without even the implied warranty of#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#    GNU Affero General Public License for more details.##    You should have received a copy of the GNU Affero General Public License#    along with this program.  If not, see <http://www.gnu.org/licenses/>.###############################################################################import timefrom openerp.osv import fields, osvfrom openerp.tools.translate import _from datetime import datetimeimport openerp.addons.decimal_precision as dpclass forex_voucher(osv.osv):    _inherit = ['mail.thread']    _name = "forex.voucher"    _columns = {        'name':fields.char('Memo', size=256, readonly=True, states={'draft':[('readonly',False)]}),        'date':fields.date('Date', readonly=True, select=True, states={'draft':[('readonly',False)]}, help="Effective date for accounting entries"),        'journal_id':fields.many2one('account.journal', 'Journal', required=True, readonly=True, states={'draft':[('readonly',False)]}, domain="['|',('company_id', '=', company_id), ('company_id', '=', False)]"),        'period_id': fields.many2one('account.period', 'Period', required=True, readonly=True, states={'draft':[('readonly',False)]}, domain="['|',('company_id', '=', company_id), ('company_id', '=', False)]"),        'narration':fields.text('Notes', readonly=True, states={'draft':[('readonly',False)]}),        'state':fields.selection(            [('draft','Draft'),             ('cancel','Cancelled'),             ('proforma','Pro-forma'),             ('posted','Posted')            ], 'Status', readonly=True, size=32, track_visibility='onchange',            help=' * The \'Draft\' status is used when a user is encoding a new and unconfirmed Voucher. \                        \n* The \'Pro-forma\' when voucher is in Pro-forma status,voucher does not have an voucher number. \                        \n* The \'Posted\' status is used when user create voucher,a voucher number is generated and voucher entries are created in account \                        \n* The \'Cancelled\' status is used when user cancel voucher.'),        'amount': fields.float('Total', digits_compute=dp.get_precision('Account'), required=True, readonly=True, states={'draft':[('readonly',False)]}),        'reference': fields.char('Ref #', size=64, readonly=True, states={'draft':[('readonly',False)]}, help="Transaction reference number."),        'number': fields.char('Number', size=32, readonly=True,),        'partner_id':fields.many2one('res.partner', 'Partner', change_default=1, readonly=True, states={'draft':[('readonly',False)]}),        'payment_rate_currency_id': fields.many2one('res.currency', 'Payment Rate Currency', required=True, readonly=True, states={'draft':[('readonly',False)]}),        'payment_rate': fields.float('Exchange Rate', digits=(12,6), required=True, readonly=True, states={'draft': [('readonly', False)]},            help='The specific rate that will be used, in this voucher, between the selected currency (in \'Payment Rate Currency\' field)  and the voucher currency.'),        'company_id': fields.many2one('res.company', 'Company', required=True, readonly=True, states={'draft':[('readonly',False)]}),        'total_amount': fields.float('Amount'),        'computed_rate': fields.float('=', digits=(12,6)),        'forex_line_ids': fields.one2many('forex.voucher.line', 'voucher_id', 'Detail'),        'currency_id': fields.many2one('res.currency', 'Currency', required=True, readonly=True, states={'draft':[('readonly',False)]}),    }    def _get_payment_rate_currency(self, cr, uid, context=None):        """        Return the default value for field payment_rate_currency_id: the currency of the journal        if there is one, otherwise the currency of the user's company        """        if context is None: context = {}        journal_pool = self.pool.get('account.journal')        journal_id = context.get('journal_id', False)        if journal_id:            journal = journal_pool.browse(cr, uid, journal_id, context=context)            if journal.currency:                return journal.currency.id        #no journal given in the context, use company currency as default        return self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.currency_id.id    _defaults = {        'state': 'draft',        'name': '',        'date': lambda *a: time.strftime('%Y-%m-%d'),        'company_id': lambda self,cr,uid,c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.voucher',context=c),        'payment_rate': 1.0,        'payment_rate_currency_id': _get_payment_rate_currency,    }    def onchange_date(self, cr, uid, ids, date, currency_id, payment_rate_currency_id, amount, company_id, context=None):        """        @param date: latest value from user input for field date        @param args: other arguments        @param context: context arguments, like lang, time zone        @return: Returns a dict which contains new values, and context        """        if context is None:            context ={}        res = {'value': {}}        #set the period of the voucher        period_pool = self.pool.get('account.period')        currency_obj = self.pool.get('res.currency')        ctx = context.copy()        ctx.update({'company_id': company_id, 'account_period_prefer_normal': True})        voucher_currency_id = currency_id or self.pool.get('res.company').browse(cr, uid, company_id, context=ctx).currency_id.id        pids = period_pool.find(cr, uid, date, context=ctx)        if pids:            res['value'].update({'period_id':pids[0]})        if payment_rate_currency_id:            ctx.update({'date': date})            payment_rate = 1.0            if payment_rate_currency_id != currency_id:                tmp = currency_obj.browse(cr, uid, payment_rate_currency_id, context=ctx).rate                payment_rate = tmp / currency_obj.browse(cr, uid, voucher_currency_id, context=ctx).rate            vals = self.onchange_currency_id(cr, uid, ids, voucher_currency_id, payment_rate_currency_id, date, context=context)            vals['value'].update({'payment_rate': payment_rate})            for key in vals.keys():                res[key].update(vals[key])        return res    def onchange_currency_id(self, cr, uid, ids, currency_id, payment_rate_currency_id, date, context=None):        if not currency_id or not payment_rate_currency_id:            return {'value': {}}        rate = self.pool.get('res.currency').compute(cr, uid, currency_id, payment_rate_currency_id, 1, context=dict(context, date=date))        return {'value': {'payment_rate': rate}}    def onchange_amount(self, cr, uid, ids, amount, total_amount, context=None):        if not total_amount:            return {'value': {}}        return {'value': {'computed_rate': float(amount)/float(total_amount)}}    def apply_exchange(self, cr, uid, ids, context=None):        for obj in self.browse(cr, uid, ids):            obj.write({'payment_rate': obj.computed_rate})        returnforex_voucher()class forex_voucher_line(osv.osv):    _name = "forex.voucher.line"    _columns = {        'debit_account_id': fields.many2one('account.account', 'Debit Account', domain="[('type', '!=', 'view')]", required=True),        'credit_account_id': fields.many2one('account.account', 'Credit Account', domain="[('type', '!=', 'view')]", required=True),        'amount': fields.float('Amount'),        'name': fields.char('Description', 1000),        'voucher_id': fields.many2one('forex.voucher', 'Voucher'),    }forex_voucher_line()