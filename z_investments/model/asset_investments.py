# -*- coding: utf-8 -*-################################################################################    OpenERP, Open Source Management Solution#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).##    This program is free software: you can redistribute it and/or modify#    it under the terms of the GNU Affero General Public License as#    published by the Free Software Foundation, either version 3 of the#    License, or (at your option) any later version.##    This program is distributed in the hope that it will be useful,#    but WITHOUT ANY WARRANTY; without even the implied warranty of#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#    GNU Affero General Public License for more details.##    You should have received a copy of the GNU Affero General Public License#    along with this program.  If not, see <http://www.gnu.org/licenses/>.###############################################################################import timefrom openerp.osv import fields, osvfrom openerp.tools.translate import _from datetime import datetimeimport openerp.addons.decimal_precision as dpclass asset_investment(osv.osv):    _name = 'asset.investment'    _description = 'Investment'    _columns = {        'name': fields.char('Asset Name', size=64, required=True,                            readonly=True,                            states={'draft': [('readonly', False)]}),        'code': fields.char('Asset Code', size=32, required=True, readonly=True,                            states={'draft': [('readonly', False)]}),        'currency_id': fields.many2one('res.currency', 'Currency',                                       required=True, readonly=True, states={                'draft': [('readonly', False)]}),        'company_id': fields.many2one('res.company', 'Company', required=True,                                      readonly=True,                                      states={'draft': [('readonly', False)]}),        'note': fields.text('Note'),        'category_id': fields.many2one('investment.category',                                       'Investment Category', required=True,                                       change_default=True, readonly=True,                                       states={                                           'draft': [('readonly', False)]}),        'parent_id': fields.many2one('asset.investment', 'Parent Asset',                                     readonly=True,                                     states={'draft': [('readonly', False)]}),        'child_ids': fields.one2many('asset.investment', 'parent_id',                                     'Children Assets'),        'created_date': fields.date('Create Date', required=True,                                     readonly=True,                                     states={'draft': [('readonly', False)]}),        'state': fields.selection(            [('draft', 'Draft'), ('open', 'Running'), ('close', 'Close')],            'Status', required=True,            help="When an asset is created, the status is 'Draft'.\n" \                 "If the asset is confirmed, the status goes in 'Running' and the depreciation lines can be posted in the accounting.\n" \                 "You can manually close an asset when the depreciation is over. If the last line of depreciation is posted, the asset automatically goes in that status."),        'active': fields.boolean('Active'),        'movement_ids': fields.one2many('asset.investment.movement', 'investment_id',                                     'Movements'),        # 'partner_id': fields.many2one('res.partner', 'Partner', readonly=True,        #                               states={'draft': [('readonly', False)]}),    }    _defaults = {        'created_date': lambda obj, cr, uid, context: time.strftime(            '%Y-%m-%d'),        'active': True,        'state': 'draft',        'currency_id': lambda self, cr, uid, c: self.pool.get(            'res.users').browse(cr, uid, uid, c).company_id.currency_id.id,        'company_id': lambda self, cr, uid, c: self.pool.get(            'res.users').browse(cr, uid, uid, c).company_id.id,    }    def onchange_company_id(self, cr, uid, ids, company_id=False, context=None):        val = {}        if company_id:            company = self.pool.get('res.company').browse(cr, uid, company_id, context=context)            if company.currency_id.company_id and company.currency_id.company_id.id != company_id:                val['currency_id'] = False            else:                val['currency_id'] = company.currency_id.id        return {'value': val}    def validate(self, cr, uid, ids, context=None):        if context is None:            context = {}        return self.write(cr, uid, ids, {            'state':'open'        }, context)    def set_to_close(self, cr, uid, ids, context=None):        return self.write(cr, uid, ids, {'state': 'close'}, context=context)    def set_to_draft(self, cr, uid, ids, context=None):        return self.write(cr, uid, ids, {'state': 'draft'}, context=context)asset_investment()class asset_investment_movement(osv.osv):    _name = 'asset.investment.movement'    _description = 'Investment Movement'    def _compute_total(self, cr, uid, ids, name, args, context=None):        res = {}        for line in self.browse(cr, uid, ids, context=context):            res[line.id] = line.units * line.cost + line.fee        return res    def _compute_cgt_days(self, cr, uid, ids, name, args, context=None):        res = {}        for line in self.browse(cr, uid, ids, context=context):            days = 0            if line.date_acquired:                date_acquired = datetime.strptime(line.date_acquired, '%Y-%m-%d')                days = (datetime.now() - date_acquired).days            res[line.id] = days        return res    def _compute_current_units(self, cr, uid, ids, name, args, context=None):        res = {}        for line in self.browse(cr, uid, ids, context=context):            res[line.id] = line.units - line.sold        return res    def _compute_holdings(self, cr, uid, ids, name, args, context=None):        res = {}        for line in self.browse(cr, uid, ids, context=context):            res[line.id] = line.units and line.total/line.units * line.current_units or False        return res    _columns = {        'date_acquired': fields.date('Date Acquired'),        'units': fields.integer('Units'),        'cost': fields.float('Cost'),        'fee': fields.float('Fee'),        'total': fields.function(_compute_total, method=True, type='float', string='Total',                                 store={                                     'asset.investment.movement': (                                     lambda self, cr, uid, ids, c={}: ids,                                     ['units', 'cost', 'fee'], 20)                                 }),        'cgt_days': fields.function(_compute_cgt_days, method=True,                                    type='float', string='CGT Days'),        'sold': fields.integer('Sold', readonly=True),        'current_units': fields.function(_compute_current_units, method=True,                                    type='integer', string='Current Units'),        'holdings': fields.function(_compute_holdings, method=True,                                    type='float', string='Holdings'),        'investment_id': fields.many2one('asset.investment', 'Investment Asset'),        'company_id': fields.related('investment_id', 'company_id', type='many2one', relation='res.company', string='Company', store=True, readonly=True),        'currency_id': fields.related('investment_id', 'currency_id', string='Currency', relation="res.currency", type='many2one', readonly=True),    }    _defaults = {        'date_acquired': lambda obj, cr, uid, context: time.strftime(            '%Y-%m-%d'),    }asset_investment_movement()