# -*- coding: utf-8 -*-################################################################################    OpenERP, Open Source Management Solution#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).##    This program is free software: you can redistribute it and/or modify#    it under the terms of the GNU Affero General Public License as#    published by the Free Software Foundation, either version 3 of the#    License, or (at your option) any later version.##    This program is distributed in the hope that it will be useful,#    but WITHOUT ANY WARRANTY; without even the implied warranty of#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#    GNU Affero General Public License for more details.##    You should have received a copy of the GNU Affero General Public License#    along with this program.  If not, see <http://www.gnu.org/licenses/>.###############################################################################import timefrom openerp.osv import fields, osvfrom openerp.tools.translate import _from datetime import datetimeimport openerp.addons.decimal_precision as dpclass investment_category(osv.osv):    _name = 'investment.category'    _description = 'Investment Category'    _columns = {        'name': fields.char('Name', size=64, required=True, select=1),        'note': fields.text('Note'),        'account_analytic_id': fields.many2one('account.analytic.account', 'Analytic account'),        'account_asset_id': fields.many2one('account.account', 'Asset Account', required=True, domain=[('type','=','other')]),        'account_gain_id': fields.many2one('account.account', 'Gain Account', required=True, domain=[('type','=','other')]),        'account_loss_id': fields.many2one('account.account', 'Loss Account', required=True, domain=[('type','=','other')]),        'journal_id': fields.many2one('account.journal', 'Journal', required=True),        'company_id': fields.many2one('res.company', 'Company', required=True),        'method': fields.selection([('linear','Linear'),('degressive','Degressive')], 'Computation Method', required=True, help="Choose the method to use to compute the amount of depreciation lines.\n"\            "  * Linear: Calculated on basis of: Gross Value / Number of Depreciations\n" \            "  * Degressive: Calculated on basis of: Residual Value * Degressive Factor"),        'method_number': fields.integer('Number of CGT Periods'),        'method_period': fields.integer('CGT Period Length', required=True),        'method_progress_factor': fields.float('Degressive Factor'),        'method_time': fields.selection([('acquisition','Acquisition Date'),('end','Ending Date')], 'Time Method', required=True),        'method_end': fields.date('Ending date'),        'prorata':fields.boolean('Prorata Temporis'),        'open_asset': fields.boolean('Skip Draft State'),    }    _defaults = {        'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'account.asset.category', context=context),        'method': 'linear',        'method_number': 5,        'method_time': 'number',        'method_period': 12,        'method_progress_factor': 0.3,    }    def onchange_account_asset(self, cr, uid, ids, account_gain_id, context=None):        res = {'value':{}}        if account_gain_id:           res['value'] = {'account_gain_id': account_gain_id}        return resinvestment_category()